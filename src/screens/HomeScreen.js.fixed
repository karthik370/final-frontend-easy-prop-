import React, { useState, useEffect, useCallback } from 'react';
import {
  StyleSheet,
  View,
  Text,
  FlatList,
  TouchableOpacity,
  Image,
  ActivityIndicator,
  RefreshControl,
  TextInput,
  ScrollView,
  Alert
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import axios from 'axios';
import { SERVER_URL } from '../config/ip-config';

// Components
import PropertyCard from '../components/PropertyCard';
import CategoryFilter from '../components/CategoryFilter';

const HomeScreen = ({ navigation }) => {
  const [properties, setProperties] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [category, setCategory] = useState('All'); // 'All', 'Buy', 'Rent', 'PG'
  const [searchQuery, setSearchQuery] = useState('');

  // Fetch properties from the backend
  const fetchProperties = useCallback(async () => {
    try {
      setIsLoading(true);
      const response = await axios.get(`${SERVER_URL}/api/properties`);
      console.log('Properties fetched successfully:', response.data.length);
      setProperties(response.data);
    } catch (error) {
      console.error('Error fetching properties:', error);
      Alert.alert(
        'Connection Error',
        'Could not fetch properties from the server. Please check your internet connection and try again.',
        [{ text: 'OK' }]
      );
      // Don't use sample data, just show empty state
      setProperties([]);
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  }, []);

  // Load properties based on selected category
  const loadFilteredProperties = useCallback(async () => {
    try {
      setIsLoading(true);
      
      // Convert UI category to backend category (Buy â†’ Sell)
      let categoryParam = '';
      if (category === 'Buy') {
        categoryParam = 'Sell';
      } else if (category === 'Rent') {
        categoryParam = 'Rent';
      }
      
      // Special handling for PG/Hostels category
      if (category === 'PG') {
        try {
          const response = await axios.get(`${SERVER_URL}/api/properties/pg`);
          setProperties(response.data);
        } catch (error) {
          console.error('Error fetching PG properties:', error);
          setProperties([]);
          Alert.alert('Error', 'Failed to load PG/Hostel properties');
        }
      } else if (category !== 'All') {
        // Fetch properties with category filter
        try {
          const response = await axios.get(`${SERVER_URL}/api/properties?category=${categoryParam}`);
          setProperties(response.data);
        } catch (error) {
          console.error(`Error fetching ${category} properties:`, error);
          setProperties([]);
          Alert.alert('Error', `Failed to load ${category} properties`);
        }
      } else {
        // Fetch all properties
        fetchProperties();
      }
    } catch (error) {
      console.error('Error in loadFilteredProperties:', error);
      setProperties([]);
    } finally {
      setIsLoading(false);
      setRefreshing(false);
    }
  }, [category, fetchProperties]);

  // Initial data fetch
  useEffect(() => {
    fetchProperties();
    
    // Add event listener for when the app comes back to foreground
    const unsubscribe = navigation.addListener('focus', () => {
      fetchProperties();
    });
    
    return unsubscribe;
  }, [fetchProperties, navigation]);

  // Category change effect
  useEffect(() => {
    loadFilteredProperties();
  }, [category, loadFilteredProperties]);

  // Handle pull-to-refresh
  const onRefresh = useCallback(() => {
    setRefreshing(true);
    loadFilteredProperties();
  }, [loadFilteredProperties]);

  // Handle search
  const handleSearch = () => {
    if (searchQuery.trim()) {
      navigation.navigate('Search', { initialQuery: searchQuery });
    }
  };

  // Navigate to property details
  const navigateToPropertyDetails = (property) => {
    navigation.navigate('PropertyDetails', { property });
  };

  // Navigate to add property screen
  const navigateToAddProperty = () => {
    navigation.navigate('AddPropertyStack', { screen: 'AddProperty' });
  };

  // Empty state component
  const EmptyListComponent = () => (
    <View style={styles.emptyContainer}>
      {isLoading ? (
        <ActivityIndicator size="large" color="#0066cc" />
      ) : (
        <>
          <Ionicons name="home-outline" size={80} color="#ccc" />
          <Text style={styles.emptyText}>No properties found</Text>
          <Text style={styles.emptySubtext}>
            {category !== 'All' 
              ? `There are no ${category} properties available at the moment.` 
              : 'There are no properties available at the moment.'}
          </Text>
          <TouchableOpacity
            style={styles.emptyButton}
            onPress={navigateToAddProperty}
          >
            <Text style={styles.emptyButtonText}>Add Your Property</Text>
          </TouchableOpacity>
        </>
      )}
    </View>
  );

  // Property list item render
  const renderPropertyItem = ({ item }) => (
    <PropertyCard
      property={item}
      onPress={() => navigateToPropertyDetails(item)}
      navigation={navigation}
    />
  );

  return (
    <View style={styles.container}>
      {/* Header with search bar */}
      <View style={styles.header}>
        <View style={styles.searchContainer}>
          <Ionicons name="search" size={20} color="#777" style={styles.searchIcon} />
          <TextInput
            style={styles.searchInput}
            placeholder="Search properties..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            onSubmitEditing={handleSearch}
            returnKeyType="search"
          />
          {searchQuery ? (
            <TouchableOpacity onPress={() => setSearchQuery('')}>
              <Ionicons name="close-circle" size={20} color="#777" />
            </TouchableOpacity>
          ) : null}
        </View>
      </View>

      {/* Category filter */}
      <CategoryFilter
        selectedCategory={category}
        onSelectCategory={setCategory}
      />

      {/* Property listing */}
      <FlatList
        data={properties}
        renderItem={renderPropertyItem}
        keyExtractor={item => item._id.toString()}
        contentContainerStyle={properties.length === 0 ? styles.emptyList : styles.list}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={['#0066cc']}
          />
        }
        ListEmptyComponent={EmptyListComponent}
        showsVerticalScrollIndicator={false}
      />

      {/* Add property button */}
      <TouchableOpacity
        style={styles.addButton}
        onPress={navigateToAddProperty}
      >
        <Ionicons name="add" size={30} color="#fff" />
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f8f8',
  },
  header: {
    backgroundColor: '#0066cc',
    paddingTop: 40,
    paddingBottom: 15,
    paddingHorizontal: 15,
  },
  searchContainer: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    borderRadius: 5,
    alignItems: 'center',
    paddingHorizontal: 10,
    height: 40,
  },
  searchIcon: {
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    height: 40,
    fontSize: 16,
  },
  list: {
    padding: 10,
  },
  emptyList: {
    flexGrow: 1,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    height: 400,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#555',
    marginTop: 10,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#777',
    textAlign: 'center',
    marginTop: 5,
    marginBottom: 20,
  },
  emptyButton: {
    backgroundColor: '#0066cc',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
  },
  emptyButtonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  addButton: {
    position: 'absolute',
    bottom: 20,
    right: 20,
    backgroundColor: '#0066cc',
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 3,
  },
});

export default HomeScreen;
