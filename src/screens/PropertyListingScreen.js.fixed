import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  FlatList,
  TouchableOpacity,
  Image,
  ActivityIndicator,
  TextInput,
  Platform,
  Dimensions,
  Alert,
} from 'react-native';
import MapView, { Marker, PROVIDER_GOOGLE } from 'react-native-maps';
import { Ionicons } from '@expo/vector-icons';
import axios from 'axios';
import { API_URL, ENDPOINTS } from '../config/api';
import PropertyCard from '../components/PropertyCard';
import * as Location from 'expo-location';

const { width, height } = Dimensions.get('window');

const PropertyListingScreen = ({ route, navigation }) => {
  // Get category from navigation params
  const { category } = route.params || { category: 'All' };
  
  const [properties, setProperties] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [userLocation, setUserLocation] = useState(null);
  const [selectedProperty, setSelectedProperty] = useState(null);
  const [mapRegion, setMapRegion] = useState({
    latitude: 12.9716,  // Default to Bangalore
    longitude: 77.5946,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const [viewMode, setViewMode] = useState('map'); // 'map' or 'list'

  useEffect(() => {
    // Get user's current location
    getUserLocation();
    
    // Fetch properties for the selected category
    fetchPropertiesByCategory();
  }, [category]);

  const getUserLocation = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        console.log('Location permission denied');
        return;
      }
      
      // Try multiple approaches to get a reliable location
      let currentLocation = null;
      
      // Method 1: Try using navigator.geolocation if available (often better on real devices)
      if (navigator && navigator.geolocation && navigator.geolocation.getCurrentPosition) {
        try {
          console.log('Attempting to get location using navigator.geolocation...');
          await new Promise((resolve, reject) => {
            navigator.geolocation.getCurrentPosition(
              (position) => {
                currentLocation = {
                  coords: {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    accuracy: position.coords.accuracy
                  }
                };
                console.log(`Navigator location found: ${position.coords.latitude}, ${position.coords.longitude}`);
                resolve();
              },
              (error) => {
                console.log('Navigator geolocation error:', error);
                reject(error);
              },
              { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }
            );
          });
        } catch (error) {
          console.log('Navigator method failed:', error);
        }
      }
      
      // Method 2: If navigator method didn't work, use Expo's Location API with different accuracy levels
      if (!currentLocation) {
        try {
          console.log('Using Expo Location with high accuracy...');
          currentLocation = await Location.getCurrentPositionAsync({
            accuracy: Location.Accuracy.BestForNavigation,
            mayShowUserSettingsDialog: true
          });
        } catch (error) {
          console.log('High accuracy failed, trying balanced accuracy:', error);
          try {
            currentLocation = await Location.getCurrentPositionAsync({
              accuracy: Location.Accuracy.Balanced
            });
          } catch (balancedError) {
            console.log('Balanced accuracy failed too, trying low accuracy:', balancedError);
            try {
              currentLocation = await Location.getCurrentPositionAsync({
                accuracy: Location.Accuracy.Low
              });
            } catch (lowError) {
              console.log('All Expo location methods failed:', lowError);
            }
          }
        }
      }
      
      // If we got a location from any method, use it
      if (currentLocation) {
        const { latitude, longitude } = currentLocation.coords;
        console.log('Got user location:', latitude, longitude);
        
        setUserLocation({
          latitude,
          longitude,
        });
        
        setMapRegion({
          latitude,
          longitude,
          latitudeDelta: 0.02, // Closer zoom
          longitudeDelta: 0.02,
        });
      }
    } catch (error) {
      console.error('Error getting location:', error);
    }
  };

  const fetchPropertiesByCategory = async () => {
    setIsLoading(true);
    
    try {
      // Construct URL with category and search query if available
      let url = `${API_URL}${ENDPOINTS.PROPERTIES}`;
      
      // Add query parameters
      const params = new URLSearchParams();
      
      if (category && category !== 'All') {
        params.append('category', category);
      }
      
      if (searchQuery) {
        params.append('search', searchQuery);
      }
      
      const queryString = params.toString();
      if (queryString) {
        url += `?${queryString}`;
      }
      
      const response = await axios.get(url);
      setProperties(response.data);
    } catch (error) {
      console.error('Error fetching properties:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Improved search with location filtering
  const handleSearch = async () => {
    if (!searchQuery) {
      return;
    }
    
    // Check if there's a location component to the search
    if (searchQuery.trim()) {
      try {
        // First try geocoding the search query to get coordinates
        const geocodeResult = await Location.geocodeAsync(searchQuery);
        
        if (geocodeResult && geocodeResult.length > 0) {
          const { latitude, longitude } = geocodeResult[0];
          console.log(`Search location geocoded: ${latitude}, ${longitude}`);
          
          // Update map region to center on search location
          setMapRegion({
            latitude,
            longitude,
            latitudeDelta: 0.02,
            longitudeDelta: 0.02,
          });
          
          // Optionally store this as a searched location
          setUserLocation({
            latitude,
            longitude
          });
        }
      } catch (error) {
        console.log('Geocode error, proceeding with text search only:', error);
      }
    }
    
    // Fetch properties with the search query
    fetchPropertiesByCategory();
  };

  const handlePropertyPress = (property) => {
    // Set the selected property and center map on it
    setSelectedProperty(property);
    
    if (property.location && property.location.coordinates && 
        property.location.coordinates.coordinates) {
      const [longitude, latitude] = property.location.coordinates.coordinates;
      
      setMapRegion({
        latitude,
        longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });
    }
  };

  const renderPropertyMarkers = () => {
    return properties.map(property => {
      if (property.location && property.location.coordinates && 
          property.location.coordinates.coordinates) {
        const [longitude, latitude] = property.location.coordinates.coordinates;
        
        return (
          <Marker
            key={property._id}
            coordinate={{ latitude, longitude }}
            title={property.title}
            description={`${property.price ? 'â‚¹' + property.price : 'Price not specified'}`}
            onPress={() => handlePropertyPress(property)}
          />
        );
      }
      return null;
    });
  };

  const toggleViewMode = () => {
    setViewMode(viewMode === 'map' ? 'list' : 'map');
  };

  // Function to go to the location picker screen
  const goToLocationPicker = () => {
    navigation.navigate('LocationPicker', {
      onSelectLocation: (location) => {
        // When a location is selected, update the map region
        if (location && location.coordinates) {
          const { latitude, longitude } = location.coordinates;
          setMapRegion({
            latitude,
            longitude,
            latitudeDelta: 0.02,
            longitudeDelta: 0.02,
          });
          setSearchQuery(location.address || ''); // Update search query with location name
          fetchPropertiesByCategory(); // Refresh properties
        }
      }
    });
  };

  // Render the main content based on view mode
  const renderContent = () => {
    if (viewMode === 'map') {
      return (
        <View style={styles.mapContainer}>
          <MapView
            provider={PROVIDER_GOOGLE}
            style={styles.map}
            region={mapRegion}
            showsUserLocation={true}
            showsMyLocationButton={true}
          >
            {renderPropertyMarkers()}
          </MapView>
          
          {selectedProperty && (
            <View style={styles.propertyInfoBox}>
              <PropertyCard property={selectedProperty} onPress={() => 
                navigation.navigate('PropertyDetail', { property: selectedProperty })
              } />
            </View>
          )}
        </View>
      );
    } else {
      return (
        <View style={styles.listContainer}>
          {isLoading ? (
            <ActivityIndicator size="large" color="#4a90e2" style={styles.loader} />
          ) : properties.length > 0 ? (
            <FlatList
              data={properties}
              keyExtractor={item => item._id}
              renderItem={({ item }) => (
                <PropertyCard 
                  property={item} 
                  onPress={() => navigation.navigate('PropertyDetail', { property: item })}
                />
              )}
              contentContainerStyle={styles.listContent}
            />
          ) : (
            <View style={styles.noResults}>
              <Text style={styles.noResultsText}>No properties found</Text>
              <Text style={styles.noResultsSubtext}>Try changing your search criteria</Text>
            </View>
          )}
        </View>
      );
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <View style={styles.searchContainer}>
          <TextInput
            style={styles.searchInput}
            placeholder="Search properties or location..."
            value={searchQuery}
            onChangeText={setSearchQuery}
            onSubmitEditing={handleSearch}
          />
          <TouchableOpacity style={styles.searchButton} onPress={handleSearch}>
            <Ionicons name="search" size={24} color="#fff" />
          </TouchableOpacity>
        </View>
        
        <TouchableOpacity style={styles.locationButton} onPress={goToLocationPicker}>
          <Ionicons name="location" size={24} color="#4a90e2" />
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.viewToggle} onPress={toggleViewMode}>
          <Ionicons name={viewMode === 'map' ? 'list' : 'map'} size={24} color="#4a90e2" />
        </TouchableOpacity>
      </View>
      
      <View style={styles.categoryHeader}>
        <Text style={styles.categoryTitle}>{category} Properties</Text>
      </View>
      
      {renderContent()}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f8f8',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    backgroundColor: '#fff',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  searchContainer: {
    flex: 1,
    flexDirection: 'row',
    height: 45,
    borderRadius: 8,
    backgroundColor: '#f5f5f5',
    overflow: 'hidden',
  },
  searchInput: {
    flex: 1,
    paddingHorizontal: 12,
    fontSize: 16,
  },
  searchButton: {
    width: 45,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#4a90e2',
  },
  locationButton: {
    marginLeft: 8,
    width: 45,
    height: 45,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#f5f5f5',
  },
  viewToggle: {
    marginLeft: 8,
    width: 45,
    height: 45,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#f5f5f5',
  },
  categoryHeader: {
    padding: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e1e1e1',
  },
  categoryTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  mapContainer: {
    flex: 1,
    position: 'relative',
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
  propertyInfoBox: {
    position: 'absolute',
    bottom: 16,
    left: 16,
    right: 16,
    backgroundColor: '#fff',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 4,
  },
  listContainer: {
    flex: 1,
  },
  listContent: {
    padding: 12,
  },
  loader: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  noResults: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  noResultsText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#555',
    marginBottom: 8,
  },
  noResultsSubtext: {
    fontSize: 14,
    color: '#777',
    textAlign: 'center',
  },
});

export default PropertyListingScreen;
