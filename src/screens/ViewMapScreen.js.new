import React, { useState, useEffect, useRef } from 'react';
import {
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  Dimensions,
  ActivityIndicator,
  Alert,
  TextInput,
  FlatList,
  Keyboard
} from 'react-native';
import MapView, { Marker, PROVIDER_GOOGLE, Callout } from 'react-native-maps';
import { Ionicons, MaterialIcons } from '@expo/vector-icons';
import axios from 'axios';
import { SERVER_URL } from '../config/ip-config';
import * as Location from 'expo-location';

const { width, height } = Dimensions.get('window');

const ViewMapScreen = ({ route, navigation }) => {
  const { propertyId, location, title, searchQuery, filters, category, viewMode } = route.params || {};
  const [isLoading, setIsLoading] = useState(false);
  const [properties, setProperties] = useState([]);
  const [region, setRegion] = useState({
    latitude: location ? location.coordinates[1] : 12.9716,
    longitude: location ? location.coordinates[0] : 77.5946,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const [searchText, setSearchText] = useState('');
  const [locationSuggestions, setLocationSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const mapRef = useRef(null);

  useEffect(() => {
    if (propertyId && location) {
      // Single property view mode
      setProperties([{
        _id: propertyId,
        title: title || 'Property',
        location: {
          coordinates: [location.coordinates[0], location.coordinates[1]]
        }
      }]);
    } else {
      // Multiple properties view mode - fetch all properties or filtered by category
      fetchProperties();
    }

    // Request location permissions
    (async () => {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission Denied', 'Location permission is needed to show your position on the map.');
      } else {
        getCurrentLocation();
      }
    })();
  }, []);

  const fetchProperties = async () => {
    setIsLoading(true);
    try {
      let endpoint = `${SERVER_URL}/api/properties`;
      let params = {};

      // If a specific category was provided
      if (category && category !== 'All') {
        let categoryParam = category;
        // Convert UI category to backend category (Buy â†’ Sell)
        if (category === 'Buy') {
          categoryParam = 'Sell';
        }
        params.category = categoryParam;
      }

      // If we have search filters, include them
      if (searchQuery || (filters && Object.values(filters).some(value => value !== ''))) {
        params = {
          ...params,
          ...filters,
          keyword: searchQuery || '',
        };
      }

      console.log(`Fetching properties from: ${endpoint}`, params);
      const response = await axios.get(endpoint, { 
        params,
        timeout: 30000 // 30 second timeout
      });
      
      let propertiesData = [];
      if (response.data && Array.isArray(response.data)) {
        propertiesData = response.data;
      } else if (response.data && response.data.properties && Array.isArray(response.data.properties)) {
        propertiesData = response.data.properties;
      }

      // Filter out properties without valid location data
      const validProperties = propertiesData.filter(
        prop => prop.location && prop.location.coordinates && 
        Array.isArray(prop.location.coordinates) && 
        prop.location.coordinates.length === 2 &&
        !isNaN(prop.location.coordinates[0]) && 
        !isNaN(prop.location.coordinates[1])
      );

      if (validProperties.length === 0 && propertiesData.length > 0) {
        console.log('No properties with valid location data');
        Alert.alert(
          'Location Data Missing',
          'Some properties do not have valid location data and cannot be shown on the map.'
        );
        // Fallback to mock data
        setProperties(getMockProperties());
      } else {
        console.log(`Found ${validProperties.length} properties with valid location data`);
        setProperties(validProperties);
      }
    } catch (error) {
      console.error('Fetch properties error:', error);
      Alert.alert(
        'Error Loading Properties',
        'Could not load properties from the server. Using sample data instead.',
        [{ text: 'OK' }]
      );
      // Use mock data as fallback
      setProperties(getMockProperties());
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch location suggestions
  const fetchLocationSuggestions = async (query) => {
    if (!query || query.length < 3) {
      setLocationSuggestions([]);
      setShowSuggestions(false);
      return;
    }

    try {
      const response = await Location.geocodeAsync(query);
      if (response && response.length > 0) {
        // Get reverse geocoding results for better display names
        const results = await Promise.all(
          response.slice(0, 5).map(async (location) => {
            try {
              const reverseGeocode = await Location.reverseGeocodeAsync({
                latitude: location.latitude,
                longitude: location.longitude
              });
              
              if (reverseGeocode && reverseGeocode.length > 0) {
                const place = reverseGeocode[0];
                return {
                  id: `${location.latitude}-${location.longitude}`,
                  name: [
                    place.name,
                    place.street,
                    place.district,
                    place.city,
                    place.region,
                    place.country
                  ].filter(Boolean).join(', '),
                  latitude: location.latitude,
                  longitude: location.longitude
                };
              }
              return null;
            } catch (error) {
              console.error('Error in reverse geocoding:', error);
              return null;
            }
          })
        );
        
        const filteredResults = results.filter(Boolean);
        setLocationSuggestions(filteredResults);
        setShowSuggestions(filteredResults.length > 0);
      } else {
        setLocationSuggestions([]);
        setShowSuggestions(false);
      }
    } catch (error) {
      console.error('Error fetching location suggestions:', error);
      setLocationSuggestions([]);
      setShowSuggestions(false);
    }
  };

  // Handle location selection from suggestions
  const handleLocationSelect = (location) => {
    setSearchText(location.name);
    setShowSuggestions(false);
    Keyboard.dismiss();
    
    // Update map region
    const newRegion = {
      latitude: location.latitude,
      longitude: location.longitude,
      latitudeDelta: 0.02,
      longitudeDelta: 0.02
    };
    
    setRegion(newRegion);
    
    // Animate map to new region
    if (mapRef.current) {
      mapRef.current.animateToRegion(newRegion, 1000);
    }
  };

  // Get current location
  const getCurrentLocation = async () => {
    try {
      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High
      });
      
      const { latitude, longitude } = location.coords;
      
      // Update map region
      const newRegion = {
        latitude,
        longitude,
        latitudeDelta: 0.02,
        longitudeDelta: 0.02
      };
      
      setRegion(newRegion);
      
      // Animate map to new region
      if (mapRef.current) {
        mapRef.current.animateToRegion(newRegion, 1000);
      }

      console.log(`High accuracy location acquired: ${latitude}, ${longitude} (${location.coords.accuracy}m accuracy)`);
    } catch (error) {
      console.error('Error getting current location:', error);
      Alert.alert('Location Error', 'Unable to get your current location. Please check your device settings.');
    }
  };

  // Mock data function for demo purposes
  const getMockProperties = () => [
    {
      _id: '1',
      title: '3 BHK Apartment in Whitefield',
      price: 25000,
      propertyType: 'Flat',
      category: 'Rent',
      location: {
        address: 'Palm Meadows, Whitefield',
        city: 'Bangalore',
        coordinates: [77.750923, 12.978134] // [longitude, latitude]
      }
    },
    {
      _id: '2',
      title: '2 BHK Independent House',
      price: 18000,
      propertyType: 'House',
      category: 'Rent',
      location: {
        address: 'Indiranagar, Near Metro',
        city: 'Bangalore',
        coordinates: [77.640320, 12.978590]
      }
    },
    {
      _id: '3',
      title: 'Premium PG Accommodation',
      price: 12000,
      propertyType: 'PG',
      category: 'Rent',
      location: {
        address: 'HSR Layout, Sector 2',
        city: 'Bangalore',
        coordinates: [77.637800, 12.914590]
      }
    },
    {
      _id: '4',
      title: '4 BHK Luxury Villa',
      price: 12000000,
      propertyType: 'House',
      category: 'Sell',
      location: {
        address: 'Prestige Golfshire, Nandi Hills',
        city: 'Bangalore',
        coordinates: [77.583080, 13.366670]
      }
    },
    {
      _id: '5',
      title: '1200 sq.ft Commercial Space',
      price: 75000,
      propertyType: 'Commercial',
      category: 'Rent',
      location: {
        address: 'MG Road, Central Business District',
        city: 'Bangalore',
        coordinates: [77.603380, 12.975020]
      }
    }
  ];

  const handleMarkerPress = (property) => {
    // Navigate to property details
    const screenMapping = {
      'HomeTab': 'PropertyDetails',
      'SearchTab': 'PropertyDetails',
      'FavoritesTab': 'PropertyDetails',
      'ProfileTab': 'PropertyDetails'
    };

    const currentRoute = navigation.getState().routes[0].name;
    const screenName = screenMapping[currentRoute] || 'PropertyDetails';

    navigation.navigate(screenName, { property });
  };

  const getMarkerColor = (property) => {
    if (!property.category) return '#0066cc'; // Default color

    switch (property.category) {
      case 'Sell':
        return '#25d366'; // Green for sale
      case 'Rent':
        if (property.propertyType === 'PG') {
          return '#ff6600'; // Orange for PG
        }
        return '#0066cc'; // Blue for rent
      default:
        return '#0066cc';
    }
  };

  return (
    <View style={styles.container}>
      {/* Header with back button and title */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
          <Ionicons name="arrow-back" size={24} color="#0066cc" />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Map View</Text>
      </View>

      {/* Search Bar */}
      <View style={styles.searchContainer}>
        <View style={styles.searchBar}>
          <Ionicons name="search" size={20} color="#999" style={styles.searchIcon} />
          <TextInput
            style={styles.searchInput}
            placeholder="Search location..."
            value={searchText}
            onChangeText={(text) => {
              setSearchText(text);
              fetchLocationSuggestions(text);
            }}
          />
          {searchText ? (
            <TouchableOpacity
              onPress={() => {
                setSearchText('');
                setLocationSuggestions([]);
                setShowSuggestions(false);
              }}
            >
              <Ionicons name="close-circle" size={20} color="#999" />
            </TouchableOpacity>
          ) : null}
        </View>
      </View>

      {/* Location Suggestions */}
      {showSuggestions && (
        <View style={styles.suggestionsContainer}>
          <FlatList
            data={locationSuggestions}
            keyExtractor={(item) => item.id}
            renderItem={({ item }) => (
              <TouchableOpacity
                style={styles.suggestionItem}
                onPress={() => handleLocationSelect(item)}
              >
                <Ionicons name="location" size={18} color="#0066cc" />
                <Text style={styles.suggestionText}>{item.name}</Text>
              </TouchableOpacity>
            )}
          />
        </View>
      )}

      {/* Map with Properties */}
      {isLoading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#0066cc" />
          <Text style={styles.loadingText}>Loading properties...</Text>
        </View>
      ) : (
        <View style={styles.mapContainer}>
          <MapView
            ref={mapRef}
            provider={PROVIDER_GOOGLE}
            style={styles.map}
            region={region}
            onRegionChangeComplete={setRegion}
          >
            {properties.map((property) => {
              // Ensure property has valid location coordinates
              if (!property.location || !property.location.coordinates || 
                  !Array.isArray(property.location.coordinates) ||
                  property.location.coordinates.length !== 2) {
                console.log('Property missing valid coordinates:', property._id);
                return null;
              }

              // MongoDB typically stores coordinates as [longitude, latitude]
              const longitude = property.location.coordinates[0];
              const latitude = property.location.coordinates[1];

              // Additional validation
              if (isNaN(longitude) || isNaN(latitude)) {
                console.log('Invalid coordinates:', property._id, longitude, latitude);
                return null;
              }

              return (
                <Marker
                  key={property._id}
                  coordinate={{
                    latitude: latitude,
                    longitude: longitude
                  }}
                  pinColor={getMarkerColor(property)}
                  onPress={() => handleMarkerPress(property)}
                >
                  <Callout tooltip>
                    <View style={styles.calloutContainer}>
                      <Text style={styles.calloutTitle}>{property.title}</Text>
                      <Text style={styles.calloutPrice}>
                        â‚¹{property.price?.toLocaleString() || 'Contact for price'}
                      </Text>
                      <Text style={styles.calloutAddress}>
                        {property.location?.address || 'Location not specified'}
                      </Text>
                      <Text style={styles.calloutDetails}>
                        {property.category === 'Sell' ? 'For Sale' : 
                        property.category === 'Rent' ? 'For Rent' : 'PG/Hostel'}
                        {property.propertyType ? ` â€¢ ${property.propertyType}` : ''}
                        {property.bedrooms ? ` â€¢ ${property.bedrooms} BHK` : ''}
                      </Text>
                      <View style={styles.calloutButton}>
                        <Text style={styles.calloutButtonText}>View Details</Text>
                      </View>
                    </View>
                  </Callout>
                </Marker>
              );
            })}

            {/* Current location marker */}
            <Marker
              coordinate={{
                latitude: region.latitude,
                longitude: region.longitude
              }}
              pinColor="blue"
              title="Current Location"
            />
          </MapView>

          {/* Current Location Button */}
          <TouchableOpacity style={styles.currentLocationButton} onPress={getCurrentLocation}>
            <Ionicons name="locate" size={24} color="#0066cc" />
          </TouchableOpacity>

          {/* Properties Count Indicator */}
          <View style={styles.propertiesCountContainer}>
            <Text style={styles.propertiesCountText}>
              {properties.length} {properties.length === 1 ? 'Property' : 'Properties'} Found
            </Text>
          </View>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f8f8',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingTop: 40, // For status bar
    paddingBottom: 10,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    zIndex: 10,
  },
  backButton: {
    padding: 5,
  },
  headerTitle: {
    flex: 1,
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginRight: 30, // To balance the back button width
  },
  searchContainer: {
    paddingHorizontal: 15,
    paddingVertical: 10,
    backgroundColor: '#fff',
    zIndex: 5,
  },
  searchBar: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
    paddingHorizontal: 15,
    borderRadius: 25,
    height: 45,
  },
  searchIcon: {
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    height: 45,
    fontSize: 16,
  },
  suggestionsContainer: {
    position: 'absolute',
    top: 115, // Positioned below search bar
    left: 15,
    right: 15,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#eee',
    borderRadius: 10,
    maxHeight: 200,
    zIndex: 20,
    elevation: 5,
  },
  suggestionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  suggestionText: {
    marginLeft: 10,
    fontSize: 14,
    color: '#333',
  },
  mapContainer: {
    flex: 1,
    position: 'relative',
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  calloutContainer: {
    width: 250,
    backgroundColor: '#fff',
    borderRadius: 10,
    padding: 15,
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  calloutTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  calloutPrice: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#0066cc',
    marginBottom: 5,
  },
  calloutAddress: {
    fontSize: 12,
    color: '#666',
    marginBottom: 5,
  },
  calloutDetails: {
    fontSize: 12,
    color: '#666',
    marginBottom: 10,
  },
  calloutButton: {
    backgroundColor: '#0066cc',
    padding: 8,
    borderRadius: 5,
    alignItems: 'center',
  },
  calloutButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
  currentLocationButton: {
    position: 'absolute',
    bottom: 80,
    right: 20,
    backgroundColor: '#fff',
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  propertiesCountContainer: {
    position: 'absolute',
    bottom: 20,
    alignSelf: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
  },
  propertiesCountText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  }
});

export default ViewMapScreen;
